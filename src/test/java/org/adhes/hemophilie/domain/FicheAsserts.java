package org.adhes.hemophilie.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FicheAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheAllPropertiesEquals(Fiche expected, Fiche actual) {
        assertFicheAutoGeneratedPropertiesEquals(expected, actual);
        assertFicheAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheAllUpdatablePropertiesEquals(Fiche expected, Fiche actual) {
        assertFicheUpdatableFieldsEquals(expected, actual);
        assertFicheUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheAutoGeneratedPropertiesEquals(Fiche expected, Fiche actual) {
        assertThat(expected)
            .as("Verify Fiche auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheUpdatableFieldsEquals(Fiche expected, Fiche actual) {
        assertThat(expected)
            .as("Verify Fiche relevant properties")
            .satisfies(e -> assertThat(e.getDossierNumber()).as("check dossierNumber").isEqualTo(actual.getDossierNumber()))
            .satisfies(e -> assertThat(e.getOrdreNumber()).as("check ordreNumber").isEqualTo(actual.getOrdreNumber()))
            .satisfies(e -> assertThat(e.getIndexNumber()).as("check indexNumber").isEqualTo(actual.getIndexNumber()))
            .satisfies(e -> assertThat(e.getAnneeDiagnostic()).as("check anneeDiagnostic").isEqualTo(actual.getAnneeDiagnostic()))
            .satisfies(e -> assertThat(e.getDiagnostic()).as("check diagnostic").isEqualTo(actual.getDiagnostic()))
            .satisfies(e -> assertThat(e.getAutreDiagnostic()).as("check autreDiagnostic").isEqualTo(actual.getAutreDiagnostic()))
            .satisfies(e ->
                assertThat(e.getDateEnregistrementRegistre())
                    .as("check dateEnregistrementRegistre")
                    .isEqualTo(actual.getDateEnregistrementRegistre())
            )
            .satisfies(e ->
                assertThat(e.getConsentementRegistre()).as("check consentementRegistre").isEqualTo(actual.getConsentementRegistre())
            )
            .satisfies(e -> assertThat(e.getParentsConsanguins()).as("check parentsConsanguins").isEqualTo(actual.getParentsConsanguins()))
            .satisfies(e ->
                assertThat(e.getDegreParenteConsanguins())
                    .as("check degreParenteConsanguins")
                    .isEqualTo(actual.getDegreParenteConsanguins())
            )
            .satisfies(e ->
                assertThat(e.getCasSimilairesFamille()).as("check casSimilairesFamille").isEqualTo(actual.getCasSimilairesFamille())
            )
            .satisfies(e -> assertThat(e.getNbreCasSimilaires()).as("check nbreCasSimilaires").isEqualTo(actual.getNbreCasSimilaires()))
            .satisfies(e ->
                assertThat(e.getDegreParenteCasSimilaires())
                    .as("check degreParenteCasSimilaires")
                    .isEqualTo(actual.getDegreParenteCasSimilaires())
            )
            .satisfies(e ->
                assertThat(e.getCasDecesSyndromeHemorragique())
                    .as("check casDecesSyndromeHemorragique")
                    .isEqualTo(actual.getCasDecesSyndromeHemorragique())
            )
            .satisfies(e -> assertThat(e.getNbreCasDeces()).as("check nbreCasDeces").isEqualTo(actual.getNbreCasDeces()))
            .satisfies(e -> assertThat(e.getFormeHemophilie()).as("check formeHemophilie").isEqualTo(actual.getFormeHemophilie()))
            .satisfies(e -> assertThat(e.getNbreFreres()).as("check nbreFreres").isEqualTo(actual.getNbreFreres()))
            .satisfies(e -> assertThat(e.getNbreSoeurs()).as("check nbreSoeurs").isEqualTo(actual.getNbreSoeurs()))
            .satisfies(e ->
                assertThat(e.getDateTestConfirmation()).as("check dateTestConfirmation").isEqualTo(actual.getDateTestConfirmation())
            )
            .satisfies(e -> assertThat(e.getHemogrammeHb()).as("check hemogrammeHb").isEqualTo(actual.getHemogrammeHb()))
            .satisfies(e -> assertThat(e.getHemogrammeHt()).as("check hemogrammeHt").isEqualTo(actual.getHemogrammeHt()))
            .satisfies(e -> assertThat(e.getPlaquettes()).as("check plaquettes").isEqualTo(actual.getPlaquettes()))
            .satisfies(e -> assertThat(e.getTp()).as("check tp").isEqualTo(actual.getTp()))
            .satisfies(e -> assertThat(e.getFibrinogene()).as("check fibrinogene").isEqualTo(actual.getFibrinogene()))
            .satisfies(e -> assertThat(e.getTcaMT()).as("check tcaMT").isEqualTo(actual.getTcaMT()))
            .satisfies(e -> assertThat(e.getTcaMT2h()).as("check tcaMT2h").isEqualTo(actual.getTcaMT2h()))
            .satisfies(e -> assertThat(e.getTcaTemoin2h()).as("check tcaTemoin2h").isEqualTo(actual.getTcaTemoin2h()))
            .satisfies(e -> assertThat(e.getTs()).as("check ts").isEqualTo(actual.getTs()))
            .satisfies(e ->
                assertThat(e.getCircumstanceDecouverte()).as("check circumstanceDecouverte").isEqualTo(actual.getCircumstanceDecouverte())
            )
            .satisfies(e ->
                assertThat(e.getDate1erSigneClinique()).as("check date1erSigneClinique").isEqualTo(actual.getDate1erSigneClinique())
            )
            .satisfies(e -> assertThat(e.getAgeDiagnostic()).as("check ageDiagnostic").isEqualTo(actual.getAgeDiagnostic()))
            .satisfies(e -> assertThat(e.getPriseEnCharge()).as("check priseEnCharge").isEqualTo(actual.getPriseEnCharge()))
            .satisfies(e -> assertThat(e.getCausePriseEnCharge()).as("check causePriseEnCharge").isEqualTo(actual.getCausePriseEnCharge()))
            .satisfies(e -> assertThat(e.getDoseProphylaxie()).as("check doseProphylaxie").isEqualTo(actual.getDoseProphylaxie()))
            .satisfies(e ->
                assertThat(e.getFrequenceProphylaxie()).as("check frequenceProphylaxie").isEqualTo(actual.getFrequenceProphylaxie())
            )
            .satisfies(e -> assertThat(e.getDebutProphylaxie()).as("check debutProphylaxie").isEqualTo(actual.getDebutProphylaxie()))
            .satisfies(e -> assertThat(e.getModaliteInjection()).as("check modaliteInjection").isEqualTo(actual.getModaliteInjection()))
            .satisfies(e ->
                assertThat(e.getTypeTraitementSubstitutif())
                    .as("check typeTraitementSubstitutif")
                    .isEqualTo(actual.getTypeTraitementSubstitutif())
            )
            .satisfies(e ->
                assertThat(e.getAge1ereSubstitution()).as("check age1ereSubstitution").isEqualTo(actual.getAge1ereSubstitution())
            )
            .satisfies(e -> assertThat(e.getPsl()).as("check psl").isEqualTo(actual.getPsl()))
            .satisfies(e -> assertThat(e.getPlasmaFraisCongele()).as("check plasmaFraisCongele").isEqualTo(actual.getPlasmaFraisCongele()))
            .satisfies(e -> assertThat(e.getCryoprecipite()).as("check cryoprecipite").isEqualTo(actual.getCryoprecipite()))
            .satisfies(e ->
                assertThat(e.getComplicationsOrthopediques())
                    .as("check complicationsOrthopediques")
                    .isEqualTo(actual.getComplicationsOrthopediques())
            )
            .satisfies(e ->
                assertThat(e.getComplicationInhibiteurs())
                    .as("check complicationInhibiteurs")
                    .isEqualTo(actual.getComplicationInhibiteurs())
            )
            .satisfies(e ->
                assertThat(e.getTestRecuperationFAH()).as("check testRecuperationFAH").isEqualTo(actual.getTestRecuperationFAH())
            )
            .satisfies(e ->
                assertThat(e.getResultatTestRecuperation())
                    .as("check resultatTestRecuperation")
                    .isEqualTo(actual.getResultatTestRecuperation())
            )
            .satisfies(e -> assertThat(e.getVieSociale()).as("check vieSociale").isEqualTo(actual.getVieSociale()))
            .satisfies(e -> assertThat(e.getEtatMarital()).as("check etatMarital").isEqualTo(actual.getEtatMarital()))
            .satisfies(e -> assertThat(e.getEnfants()).as("check enfants").isEqualTo(actual.getEnfants()))
            .satisfies(e -> assertThat(e.getHandicap()).as("check handicap").isEqualTo(actual.getHandicap()))
            .satisfies(e -> assertThat(e.getTypeHandicap()).as("check typeHandicap").isEqualTo(actual.getTypeHandicap()))
            .satisfies(e -> assertThat(e.getActiviteSportive()).as("check activiteSportive").isEqualTo(actual.getActiviteSportive()))
            .satisfies(e ->
                assertThat(e.getTypeActiviteSportive()).as("check typeActiviteSportive").isEqualTo(actual.getTypeActiviteSportive())
            )
            .satisfies(e -> assertThat(e.getDecede()).as("check decede").isEqualTo(actual.getDecede()))
            .satisfies(e -> assertThat(e.getCauseDateDeces()).as("check causeDateDeces").isEqualTo(actual.getCauseDateDeces()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheUpdatableRelationshipsEquals(Fiche expected, Fiche actual) {
        assertThat(expected)
            .as("Verify Fiche relationships")
            .satisfies(e -> assertThat(e.getHemarthrose()).as("check hemarthrose").isEqualTo(actual.getHemarthrose()))
            .satisfies(e ->
                assertThat(e.getHematomeSuperficiel()).as("check hematomeSuperficiel").isEqualTo(actual.getHematomeSuperficiel())
            )
            .satisfies(e -> assertThat(e.getHematomePsoas()).as("check hematomePsoas").isEqualTo(actual.getHematomePsoas()))
            .satisfies(e ->
                assertThat(e.getHemorragiesCutaneoMuqueuses())
                    .as("check hemorragiesCutaneoMuqueuses")
                    .isEqualTo(actual.getHemorragiesCutaneoMuqueuses())
            )
            .satisfies(e -> assertThat(e.getHemorragieVisceres()).as("check hemorragieVisceres").isEqualTo(actual.getHemorragieVisceres()))
            .satisfies(e -> assertThat(e.getSaignementSNC()).as("check saignementSNC").isEqualTo(actual.getSaignementSNC()))
            .satisfies(e -> assertThat(e.getPatient()).as("check patient").isEqualTo(actual.getPatient()));
    }
}
